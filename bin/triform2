#!/usr/bin/env python

import argparse
import pandas as pd
import numpy as np
import pyranges as pr
from pyrle import PyRles

from triform2.version import __version__

parser = argparse.ArgumentParser(
    description="""Triform2: Improved sensitivity, specificity and control of false discovery rates in ChIP-Seq peak finding.

(Visit github.com/endrebak/triform2 for examples and help.)""")

parser.add_argument('--version',
                    '-v',
                    action='version',
                    version='%(prog)s {}'.format(__version__))

parser.add_argument(
    '--treatment',
    '-t',
    required=True,
    type=str,
    nargs='+',
    help='''Treatment (pull-down) file(s) in bam/bed/bed.gz/bed.bz2 format.
                   ''')

parser.add_argument(
    '--control',
    '-c',
    required=False,
    type=str,
    nargs='+',
    help='''Control (input) file(s) in bam/bed/bed.gz/bed.bz2 format.''')

parser.add_argument(
    '--read-width',
    '-rw',
    required=False,
    default=100,
    type=int,
    help=
    '''[Advanced] Read width w, symmetrically extended to a fixed value. Default: 100 bp.''')

parser.add_argument(
    '--min-enrichment',
    '-mr',
    required=False,
    default=0.375,
    type=float,
    help=
    '''[Advanced] Minimum local enrichment ratio (default 3/8 quantile of the enrichment ratio)''')


parser.add_argument(
    '--min-width',
    '-mw',
    required=False,
    default=10,
    type=int,
    help=
    '''[Advanced] Minimum number of bp (peak width) in peak-like region (default 10 bp).''')

parser.add_argument(
    '--max-p',
    '-mp',
    required=False,
    default=0.1,
    type=float,
    help=
    '''[Advanced] Used to calculate minimum upper-tail z-value (default corresponds to standard normal p = 0.1)''')


parser.add_argument(
    '--flank-distance',
    '-fd',
    required=False,
    default=150,
    type=int,
    help=
    '''[Advanced] Fixed spacing between central and flanking locations (must be > read-width). Default: 150 bp.''')


args = vars(parser.parse_args())
gr = pr.PyRanges(pd.read_parquet(args["treatment"][0]))


flank_distance = args["flank_distance"]
read_width = args["read_width"]

max_p = args["max_p"]
min_width = args["min_width"]

from scipy.stats import norm
min_z = norm.ppf(1 - max_p)

def extend_df(df, kwargs):

    df = df.copy()
    print(kwargs)
    read_width = kwargs["read_width"]
    width = df.End - df.Start
    gaps = np.array(np.floor((read_width - width) / 2), dtype=np.long)
    df.Start = df.Start - gaps - 1
    df.End = df.Start + width + (2 * gaps)

    return df


gr = gr.apply(extend_df, {"read_width": read_width})
rles = gr.to_rle(strand=True)




if __name__ == "__main__":

    import pyranges as pr
    import pandas as pd
    import numpy as np
    read_width = 100
    flank_distance = 150

    gr = pr.PyRanges(pd.read_parquet("example_data/srf_huds_Gm12878_rep1.pq"))
    grb = pr.PyRanges(pd.read_parquet("example_data/backgr_huds_Gm12878_rep1.pq"))
    # ratio = 

    gr = gr.apply(extend_df, read_width = read_width)
    grb = grb.apply(extend_df, read_width = read_width)
    rles = gr.to_rle(strand=True)
    rles_b = gr.to_rle(strand=True)

    ratio = len(grb) / len(gr)

    nan_and_inf_to_0 = lambda x: np.nan_to_num(x, posinf=0, neginf=0)
    def above_cutoff_to_ranges(r, c, k):
        r = r.copy()
        r.values[r.values < c] = 0
        r.values[r.values >= c] = 1
        r = r.defragment()
        return PyRles({k: r}).to_ranges()


    def make_denominator(r):
        r.values = nan_and_inf_to_0(np.sqrt(r.values))
        return r

    # sqrt_and_remove_nan_inf
    # rle = rles["chrY", "+"]
    outdict = {}
    for k, rle in rles:
        chromosome, strand = k 
        print(chromosome, strand)
        print(rle)

        rle_shift_left = rle.copy()

        #TODO: fix shift. If flank_distance > runs[0], this fails
        # but for now other stuff is more important
        assert rle_shift_left.runs[0] >= flank_distance
        rle_shift_left.runs[0] -= flank_distance

        eq5_numerator = rle - rle_shift_left

        rle_shift_right = rle.copy()

        rle_shift_right.runs[0] += flank_distance

        eq6_numerator = rle - rle_shift_right

        eq4_numerator = eq5_numerator + eq6_numerator

        eq4_denominator = make_denominator(2 * (rle + rle_shift_right + rle_shift_left))

        z1 = (eq4_numerator / eq4_denominator)

        eq5_denominator = make_denominator(rle + rle_shift_left)
        z2 = eq5_numerator / eq5_denominator

        eq6_denominator = make_denominator(rle + rle_shift_right)
        z3 = eq6_numerator / eq6_denominator

        eq8_denominator = make_denominator(ratio * (rles_b[k] + rle))
        z4 = ((ratio * rle) - rles_b[k]) / eq8_denominator

        peaks1 = above_cutoff_to_ranges(z1, min_z, k)
        peaks2 = above_cutoff_to_ranges(z2, min_z, k)
        peaks3 = above_cutoff_to_ranges(z3, min_z, k)
        peaks4 = above_cutoff_to_ranges(z4, min_z, k)

        peaks1 = peaks1.intersect(peaks4)
        peaks2 = peaks2.intersect(peaks4)
        peaks3 = peaks3.intersect(peaks4)

        peaks1 = peaks1[peaks1.lengths() >= min_width]
        peaks2 = peaks2[peaks2.lengths() >= min_width]
        peaks3 = peaks3[peaks3.lengths() >= min_width]

        z1 = z1[peaks1]
        z2 = z2[peaks2]
        z3 = z3[peaks3]

        outdict[k] = [[z1, ]]
        
